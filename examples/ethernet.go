package main

import (
	"fmt"
	"log"

	"github.com/sg3des/stob"
)

type EthernetFrame struct {
	EtherHeader
	IPv4Header
	TCPHeader
	Data []byte
}

type EtherHeader struct {
	Dst  [6]byte
	Src  [6]byte
	Type [2]byte
}

type IPv4Header struct {
	Version  byte
	ToS      byte
	Length   uint16 `bo:"be"`
	ID       uint16 `bo:"be"`
	Flags    [2]byte
	TTL      byte
	Protocol byte
	CRC      uint16 `bo:"be"`
	Src      [4]byte
	Dst      [4]byte
}

//etc

type TCPHeader struct {
	Src             uint16 `bo:"be"`
	Dst             uint16 `bo:"be"`
	SeqNum          uint32 `bo:"be"`
	AckNum          uint32 `bo:"be"`
	DataOffsetFlags [2]byte
	WindowSize      uint16 `bo:"be"`
	CRC             uint16 `bo:"be"`
	UrgPoint        [2]byte
}

func main() {
	var frame EthernetFrame
	s, err := stob.NewStruct(&frame)
	if err != nil {
		log.Fatal(err)
	}

	n, err := s.Write(packet)
	if err != nil {
		log.Fatalln(err)
	}

	fmt.Printf("readed %d of %d\n%+v\n", n, len(packet), frame)
}

var packet = []byte{
	0x10, 0xb4, 0x41, 0x4a, 0x16, 0xb1, 0x01, 0x02,
	0x33, 0x04, 0x71, 0x66, 0x08, 0x00, 0x45, 0x00,
	0x05, 0xd4, 0xd6, 0xb1, 0x40, 0x00, 0x40, 0x06,
	0xe5, 0x68, 0x0a, 0x00, 0x00, 0x02, 0x0a, 0x00,
	0x00, 0x01, 0x83, 0x0b, 0x63, 0x3e, 0xbe, 0xb5,
	0x08, 0xcf, 0xfe, 0x06, 0x33, 0x6b, 0x50, 0x10,
	0x05, 0xac, 0x3d, 0x70, 0x00, 0x00, 0xec, 0x35,
	0xc1, 0x4b, 0x4b, 0x75, 0x46, 0x67, 0x97, 0xa2,
	0x7c, 0x90, 0xc4, 0x11, 0x06, 0x23, 0xd4, 0x8b,
	0x26, 0x97, 0xf2, 0xe6, 0x0a, 0x9b, 0x4d, 0xb6,
	0xeb, 0x00, 0x5f, 0x03, 0xf8, 0xa0, 0x7c, 0x8b,
	0x3e, 0x86, 0x79, 0x54, 0x32, 0x00, 0x52, 0x4f,
}
